"" Rendering -------------------
set encoding=utf-8              " Use UTF-8 as default file encoding
set spelllang=en_us             " Language and region to use for spellchecking
colo slate

set scrolloff=4                 " Keep lines above/below cursor visible
set sidescrolloff=5             " Keep columns left/right of cursor visible
set display+=lastline           " Show as much as possible of wrapped last line
set nowrap                      " Do not wrap long lines by default
set linebreak                   " Avoid wrapping a line in the middle of a word.

set lazyredraw                  " Do not redraw screen during macro execution
set helpheight=1000             " Maximize help window vertically
set formatoptions+=j            " Remove extra comment char when joining lines


"" Gadgets ---------------------
set mouse=a                     " Enable mouse for scrolling and resizing.
set title                       " Set the window’s title, reflecting the file currently being edited.
set number                      " line numbers on left side
set ruler                       " Show cursor position if status line not visible


"" Memory and Storage ----------
set hidden                      " Hide files in the background instead of closing them.
set autoread                    " Reload unchanged buffer when file changes
set history=500                 " Keep 500 lines of history
set backupdir=./.backup,.,/tmp  " Directory to store backup files.
set directory=.,./.backup,/tmp  " Directory to store swap files.
set wildignore+=.pyc            " Ignore these files


"" Search ----------------------
set incsearch                   " search as characters are entered
set hlsearch                    " highlight matches
set ignorecase
set smartcase                   " Automatically switch search to case-sensitive when search query contains an uppercase letter.
hi Search ctermfg=white ctermbg=DarkGreen


"" Command line ----------------
set wildmenu                    " Command line completion
set cmdheight=2                 " Reserve two lines for command area
set pumheight=8                 " Limit height of popup menu
set showcmd                     " Show incomplete key sequences
set complete-=3                 " Limit the files searched for auto-completes.
set completeopt+=longest        " Only insert longest common string


" Whitespace -------------------
set backspace=indent,eol,start  " Allow backspacing over everything in insert mode
set nojoinspaces                " Do not insert two spaces after '.' when using J


" Indentation ------------------
set shiftwidth=2
set shiftround                  " Round indent to multiple of 'shiftwidth'
set autoindent                  " New lines inherit the indentation of previous lines.
set tabstop=2                   " Width of displayed tabs
set expandtab                   " Convert tabs to spaces.
set smarttab                    " replace tab with tabstop number of spaces
set tabline=%!tabber#TabLine()


"" Folding ---------------------
set foldmethod=indent           " Fold based on indention levels.
set foldnestmax=3               " Only fold up to three nested levels.
set nofoldenable                " Disable folding by default.

"" misc commands -------------------------------------------------------
if has("autocmd")
  augroup FileTypeOptions
    autocmd!

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text,markdown setlocal textwidth=78 wrap

    " Always use spelling for particular file types
    autocmd FileType gitcommit setlocal spell

    " Append semicolon or comma to end of line in insert mode
    autocmd FileType c,cpp,css,javascript,php inoremap <buffer> ;; <Esc>A;
    autocmd FileType c,cpp,css,javascript,php inoremap <buffer> ,, <Esc>A,

    " Automatically complete closing tags
    autocmd FileType html,liquid,markdown,php,xml inoremap <buffer> </ </<C-x><C-o>
    autocmd FileType html,liquid,xml setlocal textwidth=120

    set cursorline
    augroup CursorLine
      autocmd!

      " Only highlight cursor line in active buffer window
      autocmd WinLeave * set nocursorline
      autocmd WinEnter * if &filetype == 'qf' | set nocursorline | else | set cursorline | endif
    augroup END

  
    augroup Cmdwin
      autocmd!
      " Never show line numbers in command-line window as they are not useful
      " and take up space (normally it inherits this setting like any other
      " window)
      autocmd CmdwinEnter * set nonumber
    augroup END
  endif
  " -----------------------------------------------------------


  " center the screen -----------------------------------------
  nnoremap n nzz
  nnoremap N Nzz
  nnoremap * *zz
  nnoremap # #zz
  nnoremap g* g*zz
  nnoremap g# g#zz
  " -----------------------------------------------------------


  " ResCur - remember where we left off last session ----------
  function! ResCur()
    if line("'\"") <= line("$")
      normal! g`"
      return 1
    endif
  endfunction
  augroup resCur
    autocmd!
    autocmd BufWinEnter * call ResCur()
  augroup END
  " ------------------------------------------------------------


  " persistent undo history ------------------------------------
  let vimDir = '$HOME/.vim'
  if stridx(&runtimepath, expand(vimDir)) == -1
    " vimDir is not on runtimepath, add it
    let &runtimepath.=','.vimDir
  endif
  if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undo_history')
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
  endif
  " -------------------------------------------------------------


  execute pathogen#infect()

  " Load matchit.vim ------------------------------------------
  if !exists("g:loaded_matchit") && findfile("~/.vim/plugins/matchit/plugin/matchit.vim", &rtp) ==# ""
    runtime! macros/matchit.vim
  endif
  " -----------------------------------------------------------









  " --- not in use ---
  "
  "

"" airline.vim
 let g:airline_branch_prefix = '⎇ '
 let g:airline_left_sep = ''
 let g:airline_right_sep = ''
 let g:airline_left_alt_sep = ''
 let g:airline_right_alt_sep = ''
 let g:airline_theme = 'minimalist'
 let g:airline_section_a = '%{fnamemodify(getcwd(), ":t")}'
 if exists('$PROJECT_TITLE')
   let g:airline_section_a = '%{$PROJECT_TITLE}'
 endif
 let g:airline#extensions#csv#column_display = 'Name'
"
" " Only enable YouCompleteMe for certain file types
" let g:ycm_filetype_whitelist = {
"       \ 'php': 1,
"       \ 'vim': 1,
"       \ 'python': 1,
"       \ 'javascript': 1,
"       \ 'ruby': 1,
"       \ 'css': 1,
"       \ 'less': 1
"       \ }
" let g:ycm_complete_in_strings = 0
" let g:ycm_autoclose_preview_window_after_insertion = 1"
  "
" if filereadable($HOME."/.vim/bundle/vim-pathogen/autoload/pathogen.vim")
"   runtime bundle/vim-pathogen/autoload/pathogen.vim
"   call pathogen#infect()        " Manage 'runtimepath' with pathogen.vim
" endif
" if has("autocmd")
"   filetype plugin indent on     " File-type detection, plug-ins, indent scripts
" endif
" if has("syntax") && !exists("g:syntax_on")
"   syntax enable                 " Enable syntax highlighting
" endif

  "
  "" highlight bad whitespacing -------------------------------
  " highlight LeadingTab ctermbg=blue guibg=blue
  " highlight LeadingSpace ctermbg=darkgreen guibg=darkgreen
  " highlight EvilSpace ctermbg=darkred guibg=darkred
  " au Syntax * syn match LeadingTab /^\t\+/
  " au Syntax * syn match LeadingSpace /^\ \+/
  " au Syntax * syn match EvilSpace /\(^\t*\)\@<!\t\+/ " tabs not preceeded by tabs
  " au Syntax * syn match EvilSpace /[ \t]\+$/ " trailing space
  " highlight! link TrailingWhitespace Error
  " augroup TrailingWhiteSpace
  "   autocmd!
  "   autocmd BufWinEnter * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
  "   autocmd InsertEnter * if &modifiable | match TrailingWhitespace /\s\+\%#\@<!$/ | endif
  "   autocmd InsertLeave * if &modifiable | match TrailingWhitespace /\s\+$/ | endif
  "   autocmd BufWinLeave * if &modifiable | call clearmatches() | endif
  " augroup END

  " -----------------------------------------------------------


  "call plug#begin('~/.vim/plugins')
  "	Plug 'rstacruz/vim-closer'
  "call plug#end()

  " turn off search highlight by pressing space
  " nnoremap <leader><space> :nohlsearch<CR> 

  "set cursorline                 " Highlight the line currently under cursor.

  " -- viminfo --
  " set viminfo='10,\"100,:20,%,n~/.viminfo
  " Tell vim to remember certain things when we exit
  "  '10  :  marks will be remembered for up to 10 previously edited files
  "  "100 :  will save up to 100 lines for each register
  "  :20  :  up to 20 lines of command-line history will be remembered
  "  %    :  saves and restores the buffer list
  "  n... :  where to save the viminfo files

